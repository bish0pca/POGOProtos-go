// Code generated by protoc-gen-go.
// source: data_capture.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of ItemAward from inventory_item.proto

// Ignoring public import of ItemData from inventory_item.proto

// Ignoring public import of ItemId from inventory_item.proto

// Ignoring public import of ItemType from inventory_item.proto

type CaptureAward struct {
	ActivityType []ActivityType `protobuf:"varint,1,rep,packed,name=activity_type,json=activityType,enum=POGOProtos.Enums.ActivityType" json:"activity_type,omitempty"`
	Xp           []int32        `protobuf:"varint,2,rep,packed,name=xp" json:"xp,omitempty"`
	Candy        []int32        `protobuf:"varint,3,rep,packed,name=candy" json:"candy,omitempty"`
	Stardust     []int32        `protobuf:"varint,4,rep,packed,name=stardust" json:"stardust,omitempty"`
}

func (m *CaptureAward) Reset()                    { *m = CaptureAward{} }
func (m *CaptureAward) String() string            { return proto.CompactTextString(m) }
func (*CaptureAward) ProtoMessage()               {}
func (*CaptureAward) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type CaptureProbability struct {
	PokeballType           []ItemId  `protobuf:"varint,1,rep,packed,name=pokeball_type,json=pokeballType,enum=POGOProtos.Inventory.Item.ItemId" json:"pokeball_type,omitempty"`
	CaptureProbability     []float32 `protobuf:"fixed32,2,rep,packed,name=capture_probability,json=captureProbability" json:"capture_probability,omitempty"`
	ReticleDifficultyScale float64   `protobuf:"fixed64,12,opt,name=reticle_difficulty_scale,json=reticleDifficultyScale" json:"reticle_difficulty_scale,omitempty"`
}

func (m *CaptureProbability) Reset()                    { *m = CaptureProbability{} }
func (m *CaptureProbability) String() string            { return proto.CompactTextString(m) }
func (*CaptureProbability) ProtoMessage()               {}
func (*CaptureProbability) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func init() {
	proto.RegisterType((*CaptureAward)(nil), "POGOProtos.Data.Capture.CaptureAward")
	proto.RegisterType((*CaptureProbability)(nil), "POGOProtos.Data.Capture.CaptureProbability")
}

func init() { proto.RegisterFile("data_capture.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4f, 0xc2, 0x30,
	0x14, 0xc6, 0xed, 0x10, 0x43, 0x2a, 0x18, 0x53, 0x8d, 0x36, 0x1c, 0x08, 0x72, 0xe2, 0xb4, 0x83,
	0x5c, 0xbc, 0x82, 0x18, 0x82, 0x17, 0x16, 0xf4, 0xe4, 0x65, 0x79, 0xeb, 0x4a, 0xd2, 0x38, 0xb6,
	0xa6, 0x7b, 0x43, 0xfa, 0x07, 0xf9, 0xf7, 0xf8, 0x2f, 0x99, 0xad, 0x63, 0x2e, 0xf1, 0xb2, 0xbc,
	0x7c, 0xdf, 0xb7, 0xbe, 0xdf, 0xd7, 0x52, 0x16, 0x03, 0x42, 0x28, 0x40, 0x63, 0x61, 0xa4, 0xaf,
	0x4d, 0x86, 0x19, 0xbb, 0x0f, 0x36, 0xab, 0x4d, 0x50, 0x8e, 0xb9, 0xbf, 0x04, 0x04, 0xff, 0xd9,
	0xd9, 0xc3, 0x4b, 0x99, 0x16, 0xfb, 0xdc, 0xa5, 0x86, 0xb7, 0x2a, 0x3d, 0xc8, 0x14, 0x33, 0x63,
	0x43, 0x85, 0x72, 0xef, 0xd4, 0xc9, 0x37, 0xa1, 0xfd, 0x3a, 0x3e, 0xff, 0x02, 0x13, 0xb3, 0x15,
	0x1d, 0x80, 0x40, 0x75, 0x50, 0x68, 0x43, 0xb4, 0x5a, 0x72, 0x32, 0xee, 0x4c, 0xaf, 0x1e, 0x47,
	0x7e, 0x6b, 0xc9, 0x4b, 0x75, 0xec, 0xbc, 0x8e, 0xbd, 0x5b, 0x2d, 0x17, 0xde, 0x35, 0xd9, 0xf6,
	0xa1, 0xa5, 0x30, 0x46, 0xbd, 0xa3, 0xe6, 0xde, 0xb8, 0x33, 0xed, 0x56, 0xae, 0x77, 0xd4, 0x8c,
	0xd3, 0xae, 0x80, 0x34, 0xb6, 0xbc, 0xd3, 0xc8, 0x4e, 0x60, 0x23, 0xda, 0xcb, 0x11, 0x4c, 0x5c,
	0xe4, 0xc8, 0xcf, 0x1b, 0xb3, 0xd1, 0x26, 0x3f, 0x84, 0xb2, 0x9a, 0x33, 0x30, 0x59, 0x04, 0x91,
	0x4a, 0x14, 0x5a, 0xf6, 0x4a, 0x07, 0x3a, 0xfb, 0x94, 0x11, 0x24, 0x49, 0x9b, 0xf6, 0xa1, 0x4d,
	0xbb, 0x3e, 0xf5, 0xf6, 0xd7, 0x65, 0xef, 0xf2, 0xb3, 0x8e, 0x1d, 0xf0, 0xe9, 0xdf, 0x0a, 0x78,
	0x46, 0x6f, 0xea, 0x7b, 0x0d, 0xf5, 0xdf, 0x8a, 0xaa, 0x81, 0x57, 0xc5, 0x99, 0xf8, 0x0f, 0xf0,
	0x44, 0xb9, 0x91, 0xa8, 0x44, 0x22, 0xc3, 0x58, 0xed, 0x76, 0x4a, 0x14, 0x09, 0xda, 0x30, 0x17,
	0x90, 0x48, 0xde, 0x1f, 0x93, 0x29, 0xd9, 0xde, 0xd5, 0xfe, 0xb2, 0xb1, 0xdf, 0x4a, 0x77, 0xd1,
	0xfb, 0xb8, 0xa8, 0x9e, 0x20, 0x0f, 0xce, 0x02, 0x12, 0xb9, 0x79, 0xf6, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xf2, 0xe7, 0xaf, 0xf3, 0xe0, 0x01, 0x00, 0x00,
}
